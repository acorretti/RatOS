#!/usr/bin/env bash
# Installs RatOS
# GPL V3
########


# Source error handling, leave this in place
set -xe

source /common.sh
install_cleanup_trap

echo_green "Installing RatOS"

pushd "/home/${BASE_USER}/printer_data/config"

gitclone RATOS_CONFIG RatOS
gitclone RATOS_THEME .theme
pushd "/home/${BASE_USER}"
gitclone RATOS_CONFIGURATOR ratos-configurator
popd
popd

unpack /filesystem/root /

# Set default git merge strategy
sudo -u pi git config --global pull.ff only

# Create release file
if [ -f "/etc/ratos_version" ]; then
    sudo rm -f /etc/ratos_version
fi
function get_parent {
    cat /etc/os-release | grep VERSION_CODENAME | cut -d '=' -f2
}

echo "${DIST_NAME} v${DIST_VERSION} ($(get_parent))" > "/etc/${DIST_NAME,,}-release"

# Install RatOS Configurator
sudo -u "${BASE_USER}" bash /home/"${BASE_USER}"/ratos-configurator/scripts/setup.sh

# Start the configurator so extensions can access the API
echo "Starting RatOS Configurator"
pushd "/home/${BASE_USER}/ratos-configurator"
sudo -u "${BASE_USER}" npm run start &
# Wait for configurator to start
timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "404" ]]; do sleep 5; done' || false
popd
# Install RatOS Configuration
sudo -u pi bash /home/"${BASE_USER}"/printer_data/config/RatOS/scripts/ratos-install.sh
sudo update-rc.d ratos defaults

# Create variant file
echo "${BASE_DISTRO}" > /etc/"${BASE_DISTRO}"-variant

# MOTD: RatOS logo
if [[ -f /etc/motd ]]; then
    cat /etc/ratos-motd > /etc/motd
elif [[ -d /etc/update-motd.d ]]; then 
    chmod a-x /etc/update-motd.d/*
    cat << EOF > /etc/update-motd.d/01-ratos-motd
#!/bin/bash
cat /etc/ratos-motd

EOF
    chmod a+x /etc/update-motd.d/01-ratos-motd
fi
